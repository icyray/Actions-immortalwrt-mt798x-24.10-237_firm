#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
# Copyright (c) 2025 icyray
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build Cudy TR3000 Immortalwrt 24.10-6.6

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: cudy-tr3000.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: cudy-tr3000.sh
  RELEASE_FILE: cudy-tr3000.md
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

  UPDATER_ENABLED: true
  UPDATER_DEFCONFIG: defconfig/mt7981-ax3000.config

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repo_url: ${{ steps.get-env.outputs.repo_url }}
      repo_branch: ${{ steps.get-env.outputs.repo_branch }}
      feeds_conf: ${{ steps.get-env.outputs.feeds_conf }}
      config_file: ${{ steps.get-env.outputs.config_file }}
      diy_p1_sh: ${{ steps.get-env.outputs.diy_p1_sh }}
      diy_p2_sh: ${{ steps.get-env.outputs.diy_p2_sh }}
      release_file: ${{ steps.get-env.outputs.release_file }}
      upload_bin_dir: ${{ steps.get-env.outputs.upload_bin_dir }}
      upload_firmware: ${{ steps.get-env.outputs.upload_firmware }}
      upload_release: ${{ steps.get-env.outputs.upload_release }}
      tz: ${{ steps.get-env.outputs.tz }}

    steps:
      - name: Get environment from env
        id: get-env
        run: |
          echo "repo_url=${{ env.REPO_URL }}" >> $GITHUB_OUTPUT
          echo "repo_branch=${{ env.REPO_BRANCH }}" >> $GITHUB_OUTPUT
          echo "feeds_conf=${{ env.FEEDS_CONF }}" >> $GITHUB_OUTPUT
          echo "config_file=${{ env.CONFIG_FILE }}" >> $GITHUB_OUTPUT
          echo "diy_p1_sh=${{ env.DIY_P1_SH }}" >> $GITHUB_OUTPUT
          echo "diy_p2_sh=${{ env.DIY_P2_SH }}" >> $GITHUB_OUTPUT
          echo "release_file=${{ env.RELEASE_FILE }}" >> $GITHUB_OUTPUT
          echo "upload_bin_dir=${{ env.UPLOAD_BIN_DIR }}" >> $GITHUB_OUTPUT
          echo "upload_firmware=${{ env.UPLOAD_FIRMWARE }}" >> $GITHUB_OUTPUT
          echo "upload_release=${{ env.UPLOAD_RELEASE }}" >> $GITHUB_OUTPUT
          echo "tz=${{ env.TZ }}" >> $GITHUB_OUTPUT

  call-builder:
    needs: setup
    uses: ./.github/workflows/image-builder.yml
    with:
      repo_url: ${{ needs.setup.outputs.repo_url }}
      repo_branch: ${{ needs.setup.outputs.repo_branch }}
      feeds_conf: ${{ needs.setup.outputs.feeds_conf }}
      config_file: ${{ needs.setup.outputs.config_file }}
      diy_p1_sh: ${{ needs.setup.outputs.diy_p1_sh }}
      diy_p2_sh: ${{ needs.setup.outputs.diy_p2_sh }}
      release_file: ${{ needs.setup.outputs.release_file }}
      upload_bin_dir: ${{ needs.setup.outputs.upload_bin_dir == 'true' }}
      upload_firmware: ${{ needs.setup.outputs.upload_firmware == 'true' }}
      upload_release: ${{ needs.setup.outputs.upload_release == 'true' }}
      tz: ${{ needs.setup.outputs.tz }}

  update-cache:
    runs-on: ubuntu-latest
    needs: call-builder
    if: ${{ github.actor }} != 'github-actions[bot]'
    steps:
      - name: Get current workflow filename
        id: get-filename
        run: |
          FILENAME=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}" | \
            jq -r '.path | split("/") | .[-1]')

          FILENAME=${FILENAME%.yml}

          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "Current workflow file: $FILENAME"

      - name: Force update repo hash cache
        id: cache-repo-hash
        uses: actions/cache@v3
        with:
          path: .repo-hash
          key: repo-hash_${{ steps.get-filename.outputs.filename }}_${{ needs.call-builder.outputs.repo_hash }}
          lookup-only: true

      - name: Cache repo hash
        if: steps.cache-repo-hash.outputs.cache-hit != 'true'
        run: echo ${{ needs.call-builder.outputs.repo_hash }} > .repo-hash
