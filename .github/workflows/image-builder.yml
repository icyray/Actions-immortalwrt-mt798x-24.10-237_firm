#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Image Builder

on:
  workflow_call:
    inputs:
      repo_url:
        required: true
        type: string
      repo_branch:
        required: true
        type: string
      feeds_conf:
        required: false
        type: string
        default: feeds.conf.default
      config_file:
        required: true
        type: string
        default: .config
      diy_p1_sh:
        required: false
        type: string
        default: diy-part1.sh
      diy_p2_sh:
        required: false
        type: string
        default: diy-part2.sh
      release_file:
        required: false
        type: string
        default: release.md
      upload_bin_dir:
        required: false
        type: boolean
        default: false
      upload_firmware:
        required: false
        type: boolean
        default: true
      upload_release:
        required: false
        type: boolean
        default: true
      tz:
        required: false
        type: string
        default: Asia/Shanghai
    outputs:
      repo_hash:
        value: ${{ jobs.build.outputs.repo_hash }}

env:
  REPO_URL: ${{ inputs.repo_url }}
  REPO_BRANCH: ${{ inputs.repo_branch }}
  FEEDS_CONF: ${{ inputs.feeds_conf }}
  CONFIG_FILE: ${{ inputs.config_file }}
  DIY_P1_SH: ${{ inputs.diy_p1_sh }}
  DIY_P2_SH: ${{ inputs.diy_p2_sh }}
  RELEASE_FILE: ${{ inputs.release_file }}
  UPLOAD_BIN_DIR: ${{ inputs.upload_bin_dir }}
  UPLOAD_FIRMWARE: ${{ inputs.upload_firmware }}
  UPLOAD_RELEASE: ${{ inputs.upload_release }}
  TZ: ${{ inputs.tz }}

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      repo_hash: ${{ steps.get-hash.outputs.repo_hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Get repo hash
        id: get-hash
        run: echo "repo_hash=$(git -C openwrt rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV || echo "DEVICE_NAME=unknown" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.conclusion == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch "${RELEASE_FILE}"
          BADGE="[![Build Time](https://img.shields.io/badge/build-$(date +"%Y--%m--%d_%H:%M")-brightgreen?logo=github)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          ![Device](https://img.shields.io/badge/device-${{ env.DEVICE_NAME }}-blue)
          [![Source Repo](https://img.shields.io/badge/source-repo-orange?logo=github)](${REPO_URL}/tree/${REPO_BRANCH})
          [![Commit](https://img.shields.io/badge/commit-$(git -C openwrt rev-parse --short=7 HEAD)-yellow?logo=github)](${REPO_URL}/commit/$(git -C openwrt rev-parse HEAD))"
          grep -q "!\[Badge\]" "${RELEASE_FILE}" && sed -i "/!\[Badge\]/c\\${BADGE}" "${RELEASE_FILE}" || sed -i "1i\\{BADGE}" "${RELEASE_FILE}"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: steps.tag.conclusion == 'success' && steps.organize.conclusion == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: ${{ env.RELEASE_FILE }}
          files: ${{ env.FIRMWARE }}/*

  cleanup:
    if: success()
    uses: ./.github/workflows/clean-up.yml
    needs: build
    with:
      clean-release: true
